---
title: "ADS-506 Assignment 3.1"
author: "Gabi Rivera"
format: pdf
editor: visual
---

```{r setup}
#| echo: false
#| message: false
#| warning: false
library(tidyverse)
library(fpp3)
library(tidymodels)
library(gt)
library(tseries)
library(caret)
library(forecast)
```

The assignment for this module is a mixture of programming and written work. Complete this assignment in Quarto or R Markdown. You will need to include the question and number that you are answering within your submitted assignment. Once completed, you will render/knit your deliverable to a PDF file.

**Textbook Exercises (Pages 187-188)**

For predicting whether the agricultural epidemic of powdery mildew in mango will erupt in a certain year in the state of Uttar Pradesh in India, Misra et al. (2004) records during 1987-2000. The epidemic typically occurs in the third and fourth week of March, and hence outbreak status is known by the end of March of a given year. The authors used a logistic regression model with two weather predictors (maximum temperature and relative humidity) to forecast an outbreak. The data is shown in the table below and are available in PowderyMildewEpidemic.csv

```{r}
pme_history <- read_csv("PowderyMildewEpidemic.csv", show_col_types = FALSE) |> 
    mutate(Outbreak = factor(Outbreak, levels = c("No", "Yes")))
gt(pme_history)
```

\newpage

## 8.4

Compute naive forecasts of epidemic status for years 1995-1997 using next-year forecasts ($F_{t|1}$ = F$_{t}$ ). What is the naive forecast for year 2000? Summarize the results for these four years in a classification matrix.

```{r naive}

# Naive Forecast
pmd_epi = pme_history %>% 
          mutate(Outbreak = ifelse(Outbreak == "Yes", 1,0))
head(pmd_epi)

naive_f = c(NA, pmd_epi$Outbreak[(length(pmd_epi$Outbreak)-4) : 
                              (length(pmd_epi$Outbreak)-1)])


# output naive forecast for all years
year = c(1994, 1995, 1996, 1997, 2020)
mildewyear = cbind(year, naive_f)
mildewyear

## The naive forecast for year 2000 is 0 or no powdery mildew epidemic occuring. 
```

```{r nc}
#output classification matrix
naive_f = as.factor(naive_f)
expected = as.factor(pmd_epi$Outbreak[(length(pmd_epi$Outbreak)-4): 
                                            length(pmd_epi$Outbreak)])

confusionMatrix(naive_f, expected, 
                positive = c("1"))
```

\newpage

## 8.5

Partition the data into training and validation periods, so that years 1987-1994 are the training period. Fit a logistic regression to the training period using the two predictors and report the outbreak probability as well as a forecast for year 1995 (use a threshold of 0.5).

```{r partition}
# Partitioning of dataset to train and validation

train_pm_epi = pmd_epi[1:8,]
val_pm_epi = pmd_epi[9:12, ]
train_pm_epi
val_pm_epi 

# prediction output for 1995

lr_train = glm(Outbreak ~ MaxTemp + RelHumidity, data = train_pm_epi, 
               family = "binomial")
summary(lr_train)

lr_pred = predict(lr_train, val_pm_epi,type = "response")
lr_pred_outbreak = round(lr_pred, 0)
year = c(1995, 1996, 1997, 2020)
lr_train_pred = cbind(year, lr_pred, lr_pred_outbreak)


# There is 11% probability that an epidemic will breakout in 1995 or no outbreak. 

#output classification matrix

confusionMatrix(as.factor(ifelse(lr_pred > 0.5, 1,0)), 
                as.factor(val_pm_epi$Outbreak), 
                positive = c("1"))
```

\newpage

## 8.6

Generate outbreak forecasts for years 1996, 1997 and 2000 by repeatedly moving the training period forward. For example, to forecast year 1996, partition the data so that years 1987-1995 are the training period. Then fit the logistic regression model and use it to generate a forecast (use threshold 0.5). Output a table of forecasts for 1995-1997 and 2000.

```{r gen}
# Partitioning of dataset to train and validation dataset

train_96 = pmd_epi[1:9,]
train_97 = pmd_epi[1:10,]
train_20 = pmd_epi[1:11,]
val_96 = pmd_epi[10:10,]
val_97 = pmd_epi[11:11,]
val_20 = pmd_epi[12:12,]
val_all = pmd_epi[10:12,]

# Logistic regression models

lr_96 = glm(Outbreak ~ MaxTemp + RelHumidity, data = train_96, 
               family = "binomial")
lr_96_pred = predict(lr_96, newdata = val_96, type = "response")

lr_97 = glm(Outbreak ~ MaxTemp + RelHumidity, data = train_97, 
               family = "binomial")
lr_97_pred = predict(lr_97, newdata = val_97, type = "response")

lr_20 = glm(Outbreak ~ MaxTemp + RelHumidity, data = train_20, 
               family = "binomial")
lr_20_pred = predict(lr_20, newdata = val_20, type = "response")


# output LR forecast for 1995-1997 and 2000.

year = c(1996, 1997, 2020)
pred_prob = c(lr_96_pred, lr_97_pred, lr_20_pred)
Outbreak = c(round(lr_96_pred, 0), round(lr_97_pred, 0), round(lr_20_pred, 0))
table = cbind(year, pred_prob, Outbreak)
table

#output classification matrix

confusionMatrix(as.factor(ifelse(pred_prob > 0.5, 1,0)), 
                as.factor(val_all$Outbreak), 
                positive = c("1"))
```

\newpage

## 8.7

*Summarize the logistic regression\'s predictive accuracy for these four years (1995-1997, 2000) in a classification matrix.*

```{r}
# Actual and forecasted values
actual = pmd_epi[9:12,]
actual_outcomes = actual$Outbreak
forecasted_values = c(0, round(lr_96_pred, 0), round(lr_97_pred, 0), round(lr_20_pred, 0))  

# output LR confusion matrix

conf_matrix = table(Actual = actual_outcomes, Predicted = forecasted_values)

accuracy = sum(diag(conf_matrix)) / sum(conf_matrix)
precision = conf_matrix[2, 2] / sum(conf_matrix[, 2])
recall = conf_matrix[2, 2] / sum(conf_matrix[2, ])
f1_score = 2 * (precision * recall) / (precision + recall)


cat("Confusion Matrix:\n")
print(conf_matrix)

cat("\nClassification Metrics:\n")
cat("Accuracy: ", accuracy, "\n")
cat("Precision: ", precision, "\n")
cat("Recall: ", recall, "\n")
cat("F1 Score: ", f1_score, "\n")
```
